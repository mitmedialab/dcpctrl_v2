%{
testsegmenter
Julian Leland, MIT Media Lab, 2016-07-01
This function segments tests generated by laser tracker systems into
individual test runs. It currently works with the Leica emScon 4518, but
could be reconfigured (just the import line) to work with other systems.
%}
%% Figure out starting position
%addpath('apps\characterization');
addpath('apps/characterization');
%TestData = importLeicaFile('C:\Users\julia\Dropbox (MIT)\MDCP2\Design\Testing\TestData_RAW\LeicaSystemCharacterization_2016-07-03\isorepeatability_full.txt');
TestData = importLeicaFile('/Users/julianleland/Dropbox (MIT)/MDCP2/Design/Testing/TestData_RAW/LeicaSystemCharacterization_2016-07-03/isorepeatability_full.txt');
%TestData = importLeicaFile('/Users/julianleland/Dropbox (MIT)/MDCP2/Design/Testing/TestData_RAW/LeicaSystemCharacterization_2016-07-02/fullrepeatabilitytest_35cycles.txt');

%% Add extra column to Test1 to store which run we're on
tdata = [TestData(:,1:4),zeros(length(TestData),1)];

%% Add another extra column to store timestamp (start = 0)
dt = 0.3; % Set this to the dt from your test
timesteps = [0:dt:(length(tdata)-1)*dt]';
tdata = [tdata,timesteps];

%% Plot test data to get a sense of what we should see
figure;
hold on;
plot(tdata(:,6),tdata(:,2));
plot(tdata(:,6),tdata(:,3));
plot(tdata(:,6),tdata(:,4));
hold off;

%% Truncate any inconsistent data from beginning of run - optional
tdata = tdata(120:end,:);

%% Figure out which points belong to which run
xtol = ones(1,3)*100; % Set this so that it exceeds the maximum repeatability
dxtol = ones(1,3)*.05; % Tolerance for deciding when derivative is no longer nonzero
check = 5;
% We are doing this currently with a sgolay filter. There are likely better
% options, but this works for now.
filtData = sgolayfilt(tdata(:,2:4),4,21);
d_filtData = diff(filtData);
err = zeros(round(length(tdata)/check)+1,3);
run = 1;
figure;
hold on;
recn = [];
for n = 1:length(tdata)
    if all([abs(filtData(n,:)-filtData(1,:)) <= xtol]) && all([abs(d_filtData(n)) <= dxtol]) % Case: Using absolute position & derivative to detect end of runs.
    %if all([abs(filtData(n,:)-filtData(1,:)) <= xtol]) % Case: Using absolute position ONLY to detect end of runs
    %if all([abs(d_filtData(n)) <= dxtol]) % Case: Using derivative ONLY to detect end of runs
        tdata(n,5) = run;
    end
    err(n,:) = [abs(filtData(n,:)-filtData(1,:))];
end
% Plotting: Uncomment if you're not getting segments recognized at 
plot(filtData);
plot(d_filtData);
plot(err,'.');
legend('X','Y','Z','dX','dY','dZ','errX','errY','errZ');


%% Plot the "newmove" index against plot
figure; 
plotyy((1:length(tdata))',tdata(:,5),(1:length(tdata))',tdata(:,2:4))

%% Filter newmove index
% You may need to run this segment a few times with different values of
% framesize until you capture all endpoints, but don't have too many
% segments. Larger framesizes will smooth more/decrease the number of
% segments, smaller framesizes will increase the number of segments.
% Between 3 and 5 seems to work pretty well.
framesize = 5; %11 works for 2-segment tests, 5 for 35-segment tests
filtDatas = sgolayfilt(tdata(:,5),3,framesize);
filtDatas = round(filtDatas); % Round to force values to be zero or one
figure;
plotyy((1:length(tdata))',filtDatas,(1:length(tdata))',tdata(:,2:4))

%% Iterate through data and set markers where we find falling edges.
marker = [];
for n = 1:length(filtDatas)-1
    if filtDatas(n) && ~filtDatas(n+1)
        marker = [marker;n];
    end
end
marker = [1;marker;length(filtDatas)]; % Add 1 and end onto marker list
fprintf('Current segments:\n');
disp(marker);
fprintf('If you would like to add other segments, please edit marker manually now.\n');

%% Break up the path into segments that correspond to each test, and reject first segment.
segts = {};
for m = 1:length(marker)-1
    segts{m} = tdata(marker(m):marker(m+1),:);
end
% Comment this line out to keep first segment.
segts(:,1) = [];

%% Reject segments that are too short
seglen = [];
cleansegts = {};
for m = 1:length(segts)
    seglen = [seglen,length(segts{1,m})];
    if length(segts{1,m}) >= 200
        cleansegts{1,end+1} = segts{1,m};
    end
end
plot(seglen)
segts = cleansegts;

%% Plot each segment in a different color
j = 1; % Index to start colormap at
figure;

colors = get(gca,'ColorOrder');
fig1 = subplot(1,2,1)
hold on;
for n = 1:length(segts)
    plot3(segts{1,n}(:,2),segts{1,n}(:,3),segts{1,n}(:,4),'Color',[colors(j,:)]);
    j = j+1;
    if j == 7
        j = 1;
    end
end
grid on
axis image
axis equal
xlabel('X');
ylabel('Y');
zlabel('Z');
view(55,35)

j = 1;
fig2 = subplot(1,2,2)
hold on;
for n = 1:length(segts)
    plot(segts{1,n}(:,6),segts{1,n}(:,2),'Color',colors(j,:));
    plot(segts{1,n}(:,6),segts{1,n}(:,3),'Color',colors(j,:));
    plot(segts{1,n}(:,6),segts{1,n}(:,4),'Color',colors(j,:));
    j = j+1;
    if j == 7
        j = 1;
    end
end
xlabel('Time, s');
ylabel('Measured Position in Direction');
suptitle('Run Data: 3D & Position-Per-Axis');
